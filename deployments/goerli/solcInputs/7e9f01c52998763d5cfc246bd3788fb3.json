{
  "language": "Solidity",
  "sources": {
    "contracts/DEXTokenControlMultiSig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n//contract with three owner addresses and two confirmations required\n\ncontract DEXTokenControlMultiSig {\n    event Deposit(address indexed sender, uint amount, uint balance);\n    event SubmitTransaction(\n        address indexed owner,\n        uint indexed txIndex,\n        address indexed to,\n        uint value,\n        bytes data\n    );\n    event ConfirmTransaction(address indexed owner, uint indexed txIndex);\n    event RevokeConfirmation(address indexed owner, uint indexed txIndex);\n    event ExecuteTransaction(address indexed owner, uint indexed txIndex);\n\n    address[] public owners;\n    mapping(address => bool) public isOwner;\n    uint public numConfirmationsRequired;\n\n    struct Transaction {\n        address to;\n        address toMint;\n        uint value;\n        bytes data;\n        bool executed;\n        uint numConfirmations;\n    }\n\n    // mapping from tx index => owner => bool\n    mapping(uint => mapping(address => bool)) public isConfirmed;\n\n    Transaction[] public transactions;\n\n    modifier onlyOwner() {\n        require(isOwner[msg.sender], \"not owner\");\n        _;\n    }\n    modifier onlyCreator() {\n        require(msg.sender == 0x684585A4E1F28D83F7404F0ec785758C100a3509, \"not owner\");\n        _;\n    }\n    modifier txExists(uint _txIndex) {\n        require(_txIndex < transactions.length, \"tx does not exist\");\n        _;\n    }\n\n    modifier notExecuted(uint _txIndex) {\n        require(!transactions[_txIndex].executed, \"tx already executed\");\n        _;\n    }\n\n    modifier notConfirmed(uint _txIndex) {\n        require(!isConfirmed[_txIndex][msg.sender], \"tx already confirmed\");\n        _;\n    }\n\n    constructor() {\n        numConfirmationsRequired = 2;\n    }\n\n    receive() external payable {\n        emit Deposit(msg.sender, msg.value, address(this).balance);\n    }\n\n    function addOwner(address newOwner) public {\n        require(!isOwner[newOwner], \"address is already owner\");\n        isOwner[newOwner] = true;\n        owners.push(newOwner);\n    }\n\n    //function propose mint\n    //A function that calls directly the mint function in the ERC20 to mint a certain amount of ERC20 tokens to an address\n    function Mint1(address erc20ContractAddress) public onlyOwner returns (uint txIndex) {\n        bytes memory _data = abi.encodeWithSignature(\n            \"mintTokensTo(address,uint256)\",\n            msg.sender,\n            100000000000000000\n        );\n        txIndex = transactions.length;\n        transactions.push(\n            Transaction({\n                to: erc20ContractAddress,\n                toMint: msg.sender,\n                value: 0,\n                data: _data,\n                executed: false,\n                numConfirmations: 0\n            })\n        );\n\n        emit SubmitTransaction(msg.sender, txIndex, erc20ContractAddress, 0, _data);\n    }\n\n    //owner function to mint tokens without restriction on amount\n    function erc20Mint(\n        address erc20ContractAddress,\n        uint256 tokenAmountToMint\n    ) public onlyOwner returns (uint txIndex) {\n        bytes memory _data = abi.encodeWithSignature(\n            \"mintTokensTo(address,uint256)\",\n            msg.sender,\n            tokenAmountToMint\n        );\n        txIndex = transactions.length;\n        transactions.push(\n            Transaction({\n                to: erc20ContractAddress,\n                toMint: msg.sender,\n                value: 0,\n                data: _data,\n                executed: false,\n                numConfirmations: 0\n            })\n        );\n\n        emit SubmitTransaction(msg.sender, txIndex, erc20ContractAddress, 0, _data);\n    }\n\n    function submitTransaction(address _to, uint _value, bytes memory _data) public onlyOwner {\n        uint txIndex = transactions.length;\n\n        transactions.push(\n            Transaction({\n                to: _to,\n                toMint: 0x0000000000000000000000000000000000000000,\n                value: _value,\n                data: _data,\n                executed: false,\n                numConfirmations: 0\n            })\n        );\n\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\n    }\n\n    function confirmTransaction(\n        uint _txIndex\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) notConfirmed(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n        transaction.numConfirmations += 1;\n        isConfirmed[_txIndex][msg.sender] = true;\n\n        emit ConfirmTransaction(msg.sender, _txIndex);\n    }\n\n    function executeTransaction(\n        uint _txIndex\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(transaction.numConfirmations >= numConfirmationsRequired, \"cannot execute tx\");\n\n        transaction.executed = true;\n\n        (bool success, ) = transaction.to.call{value: transaction.value}(transaction.data);\n        require(success, \"tx failed\");\n\n        emit ExecuteTransaction(msg.sender, _txIndex);\n    }\n\n    function revokeConfirmation(\n        uint _txIndex\n    ) public onlyOwner txExists(_txIndex) notExecuted(_txIndex) {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(isConfirmed[_txIndex][msg.sender], \"tx not confirmed\");\n\n        transaction.numConfirmations -= 1;\n        isConfirmed[_txIndex][msg.sender] = false;\n\n        emit RevokeConfirmation(msg.sender, _txIndex);\n    }\n\n    function sendEthBack() public onlyOwner {\n        (bool success, ) = 0x684585A4E1F28D83F7404F0ec785758C100a3509.call{\n            value: address(this).balance\n        }(\"\");\n        require(success, \"failed to send remaining eth\");\n    }\n\n    function getOwners() public view returns (address[] memory) {\n        return owners;\n    }\n\n    function getTransactionCount() public view returns (uint) {\n        return transactions.length;\n    }\n\n    function getTransaction(\n        uint _txIndex\n    )\n        public\n        view\n        returns (\n            address to,\n            uint value,\n            bytes memory data,\n            bool executed,\n            uint numConfirmations,\n            address toMint\n        )\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        return (\n            transaction.to,\n            transaction.value,\n            transaction.data,\n            transaction.executed,\n            transaction.numConfirmations,\n            transaction.toMint\n        );\n    }\n\n    function getLastTxIndex() public view returns (uint lastTxIndex) {\n        uint txLength = transactions.length;\n        require(txLength > 0, \"no registered transactions\");\n        lastTxIndex = txLength - 1;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}