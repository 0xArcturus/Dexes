{
  "address": "0x2C51aBdb2eD665D604ba313aAc050938974D4747",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yeahTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethRes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "ethToTokenView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "name": "getLiquidityProvided",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidityProvided",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "msgVal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenRes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "tokenToEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "tokenToEthView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xadf2910ca8da095b8ae4bcfd7ed6605e2ff786bf891e017bceff80690ba20cbf",
  "receipt": {
    "to": null,
    "from": "0x684585A4E1F28D83F7404F0ec785758C100a3509",
    "contractAddress": "0x2C51aBdb2eD665D604ba313aAc050938974D4747",
    "transactionIndex": 13,
    "gasUsed": "1480499",
    "logsBloom": "0x
    "blockHash": "0xc5eb1f16803761188471c1dd29fc457a67b934e350cbfb2331e8eba4847341fe",
    "transactionHash": "0xadf2910ca8da095b8ae4bcfd7ed6605e2ff786bf891e017bceff80690ba20cbf",
    "logs": [],
    "blockNumber": 8327731,
    "cumulativeGasUsed": "4068981",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD02f877E7c9748B69729ACf39949C12A8D529B5c"
  ],
  "numDeployments": 8,
  "solcInputHash": "437da1539ca5b201ace9335996f4c65b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yeahTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethRes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"ethToTokenView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"getLiquidityProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"msgVal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenRes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokenToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokenToEthView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DexV1.sol\":\"DexV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/DexV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//This is an exercise to put into practice a basic Dex based on Uniswap's V1 protocol,\\n//as a pair that exchanges native ETH with the ERC20 token address we introduce on contract deployment.\\ncontract DexV1 {\\n    using SafeMath for uint256;\\n    IERC20 token;\\n    uint256 public totalLiquidity;\\n    mapping(address => uint256) public liquidityProvided;\\n    uint256 public ethRes;\\n    uint256 public tokenRes;\\n    uint256 public msgVal;\\n    uint256 public tokenAmount;\\n\\n    constructor(address yeahTokenAddress) public {\\n        token = IERC20(yeahTokenAddress);\\n    }\\n\\n    //getters\\n    function getLiquidity() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getTotalLiquidity() public view returns (uint256) {\\n        return totalLiquidity;\\n    }\\n\\n    function getTokenReserves() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    function getLiquidityProvided(address liquidityProvider) public view returns (uint256) {\\n        require(\\n            liquidityProvided[liquidityProvider] > 0,\\n            \\\"address has not provided liquidity to this pool\\\"\\n        );\\n        return liquidityProvided[liquidityProvider];\\n    }\\n\\n    //to init, the contract must be approved to perform the transfer\\n    function init(uint256 tokens) public payable returns (uint256) {\\n        require(totalLiquidity == 0, \\\"dex has already been initialized\\\");\\n        // if someone send eth before calling the init function, the liquidity provided will be captured by\\n        //the user that calls init.\\n        totalLiquidity = address(this).balance;\\n        liquidityProvided[msg.sender] = totalLiquidity;\\n        require(token.transferFrom(msg.sender, address(this), tokens)); //transfer call for the amount we set as an input to this func\\n        return totalLiquidity;\\n    }\\n\\n    function price(uint256 a, uint256 x, uint256 y) private pure returns (uint256) {\\n        //the constant k remains the same\\n        //x * y = k\\n        // x * y = x' * y'\\n\\n        //the amount of tokens we recieve depends on the multiplication of x and y to mantain the constant\\n        // x' * y' = k\\n        //a is the token amount we input in the exchange\\n        // x + a = x'\\n        //b is the token amount we recieve\\n        // y - b = y'\\n\\n        //(x + a)(y - b) = k\\n\\n        //solving to b we deduce:\\n        //b = (y * a) / (x + a)\\n\\n        //with the 0,3% trading fee:\\n        //b = (y * a * 0,997) / (x + a * 0,997)\\n\\n        uint256 input_with_fee = a.mul(997);\\n        uint256 numerator = y.mul(input_with_fee);\\n        uint256 denominator = x.mul(1000).add(input_with_fee);\\n        return numerator / denominator;\\n    }\\n\\n    function ethToToken() public payable returns (uint256) {\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        //ETH is X, tokens are Y\\n        //y - b = y'\\n        //how many tokens are we getting?\\n        uint256 tokensBought = price(msg.value, address(this).balance.sub(msg.value), tokenReserve); // a , x=x'- a, y\\n        require(token.transfer(msg.sender, tokensBought), \\\"failed to transfer ETH\\\");\\n        return tokensBought;\\n    }\\n\\n    function ethToTokenView(uint256 msgValue) public view returns (uint256) {\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        //ETH is X, tokens are Y\\n        //y - b = y'\\n        //how many tokens are we getting?\\n        uint256 tokensBought = price(msgValue, address(this).balance, tokenReserve); // a , x=x'- a, y\\n\\n        return tokensBought;\\n    }\\n\\n    function tokenToEth(uint256 tokens) public payable returns (uint256) {\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        //in this case, tokens is X, Y is eth\\n        //y - b = y'\\n        //how many ETH are we getting?\\n        uint256 ethBought = price(tokens, tokenReserve, address(this).balance); // a , x, y\\n        require(token.transferFrom(msg.sender, address(this), tokens), \\\"failed to transfer tokens\\\");\\n        (bool sent, ) = msg.sender.call{value: ethBought}(\\\"\\\");\\n        require(sent, \\\"failed to send ETH\\\");\\n        return ethBought;\\n    }\\n\\n    function tokenToEthView(uint256 tokens) public view returns (uint256) {\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        //in this case, tokens is X, Y is eth\\n        //y - b = y'\\n        //how many ETH are we getting?\\n        uint256 ethBought = price(tokens, tokenReserve, address(this).balance); // a , x, y\\n        return ethBought;\\n    }\\n\\n    function deposit() public payable returns (uint256) {\\n        //checks the original ETH reserve, subtracting what we have sent\\n        uint256 eth_reserve = address(this).balance.sub(msg.value);\\n        ethRes = eth_reserve;\\n        //Token reserve\\n        uint256 token_reserve = token.balanceOf(address(this));\\n        tokenRes = token_reserve;\\n        //token amount example with a pool with reserves of 4 eth and 8000 Dai\\n        // we send 1 eth, 1 * 8000 / 4 = 2000, therefore it will input the balance of 1 2000, which is correct.\\n        uint256 token_amount = (msg.value.mul(token_reserve) / eth_reserve).add(1);\\n        msgVal = msg.value;\\n        tokenAmount = token_amount;\\n\\n        //((eth sent * total liquidity shares ) / eth reserves ) + 1\\n        // the previous formula with 18 decimals makes it so that the LP tokens minted to the user is\\n        //equal to the eth send, since the total liquidity shares in V1 is always going to be equal to the eth reserves.\\n        uint256 liquidity_minted = msg.value.mul(totalLiquidity) / eth_reserve;\\n        //liquidity tokens added to user balance\\n        liquidityProvided[msg.sender] = liquidityProvided[msg.sender].add(liquidity_minted);\\n        //update total liquidity for future liquidity operations\\n        totalLiquidity = totalLiquidity.add(liquidity_minted);\\n        //call transferFrom with the approved tokens to this contract to finish adding liquidity\\n        require(token.transferFrom(msg.sender, address(this), token_amount));\\n        return liquidity_minted;\\n\\n        //on V2 the process is transferFunction agnostic, there is no approval, instead, the tokens must be sent to the contract,\\n        //the contract itself will keep track of the token balance after each interaction, and will calculate how many tokens you have sent,\\n        //based on the difference between the balanceOf its own address in the ERC20 contract, with its own balance data structure.\\n    }\\n\\n    function withdraw(uint256 amount) public returns (uint256, uint256) {\\n        //ERC20 token call to know what is the balance of this contract\\n        uint256 token_reserve = token.balanceOf(address(this));\\n        //on the same pool mentioned before, with 5 eth and 10000 DAI the user inputs 1 as amount\\n        //1 * 5 / 5 = 1\\n        uint256 eth_amount = amount.mul(address(this).balance) / totalLiquidity;\\n        //1 * 10000 / 5 = 2000\\n        uint256 token_amount = amount.mul(token_reserve) / totalLiquidity;\\n        //liquidity subtracted from the users liquidity balance -1 = 0\\n        liquidityProvided[msg.sender] = liquidityProvided[msg.sender].sub(eth_amount);\\n\\n        totalLiquidity = totalLiquidity.sub(eth_amount);\\n        //transfer eth to user natively\\n        payable(msg.sender).transfer(eth_amount);\\n        //transfer 2000 dai to user\\n        require(token.transfer(msg.sender, token_amount));\\n        return (eth_amount, token_amount);\\n    }\\n}\\n\",\"keccak256\":\"0x822048b6dbdeb662e6c9480b7ca7eec19d685c2e50c6a21b4e1bc5c45111f9a8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001a8638038062001a86833981810160405281019062000037919062000095565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200010f565b6000815190506200008f81620000f5565b92915050565b600060208284031215620000a857600080fd5b6000620000b8848285016200007e565b91505092915050565b6000620000ce82620000d5565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200010081620000c1565b81146200010c57600080fd5b50565b611967806200011f6000396000f3fe6080604052600436106100fe5760003560e01c806370b2a30f11610095578063b7b0422d11610064578063b7b0422d1461035a578063b9cf50051461038a578063d0e30db0146103b5578063ea915f91146103d3578063eec7faa1146103fe576100fe565b806370b2a30f14610292578063789770f4146102c257806380c1443b146102e057806386e35a9a1461031d576100fe565b80632e1a7d4d116100d15780632e1a7d4d146101c157806335c7e925146101ff5780634099cfc21461022a57806365119f7214610255576100fe565b80630910a510146101035780630ea229181461012e57806315770f92146101595780631e2bc32114610184575b600080fd5b34801561010f57600080fd5b50610118610429565b60405161012591906116d1565b60405180910390f35b34801561013a57600080fd5b50610143610431565b60405161015091906116d1565b60405180910390f35b34801561016557600080fd5b5061016e610437565b60405161017b91906116d1565b60405180910390f35b34801561019057600080fd5b506101ab60048036038101906101a6919061135f565b61043d565b6040516101b891906116d1565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e391906113b1565b610507565b6040516101f69291906116ec565b60405180910390f35b34801561020b57600080fd5b506102146107bb565b60405161022191906116d1565b60405180910390f35b34801561023657600080fd5b5061023f6107c5565b60405161024c91906116d1565b60405180910390f35b34801561026157600080fd5b5061027c6004803603810190610277919061135f565b6107cb565b60405161028991906116d1565b60405180910390f35b6102ac60048036038101906102a791906113b1565b6107e3565b6040516102b991906116d1565b60405180910390f35b6102ca610a45565b6040516102d791906116d1565b60405180910390f35b3480156102ec57600080fd5b50610307600480360381019061030291906113b1565b610c08565b60405161031491906116d1565b60405180910390f35b34801561032957600080fd5b50610344600480360381019061033f91906113b1565b610ccf565b60405161035191906116d1565b60405180910390f35b610374600480360381019061036f91906113b1565b610d96565b60405161038191906116d1565b60405180910390f35b34801561039657600080fd5b5061039f610eeb565b6040516103ac91906116d1565b60405180910390f35b6103bd610f9c565b6040516103ca91906116d1565b60405180910390f35b3480156103df57600080fd5b506103e8611249565b6040516103f591906116d1565b60405180910390f35b34801561040a57600080fd5b5061041361124f565b60405161042091906116d1565b60405180910390f35b600047905090565b60055481565b60015481565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b790611631565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161056691906115b6565b60206040518083038186803b15801561057e57600080fd5b505afa158015610592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b691906113da565b905060006001546105d0478761125590919063ffffffff16565b6105da9190611787565b905060006001546105f4848861125590919063ffffffff16565b6105fe9190611787565b905061065282600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126b90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106aa8260015461126b90919063ffffffff16565b6001819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156106f6573d6000803e3d6000fd5b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610752929190611608565b602060405180830381600087803b15801561076c57600080fd5b505af1158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190611388565b6107ad57600080fd5b818194509450505050915091565b6000600154905090565b60035481565b60026020528060005260406000206000915090505481565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161083f91906115b6565b60206040518083038186803b15801561085757600080fd5b505afa15801561086b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088f91906113da565b9050600061089e848347611281565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016108fd939291906115d1565b602060405180830381600087803b15801561091757600080fd5b505af115801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f9190611388565b61098e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098590611651565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16826040516109b4906115a1565b60006040518083038185875af1925050503d80600081146109f1576040519150601f19603f3d011682016040523d82523d6000602084013e6109f6565b606091505b5050905080610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3190611691565b60405180910390fd5b819350505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aa191906115b6565b60206040518083038186803b158015610ab957600080fd5b505afa158015610acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af191906113da565b90506000610b1234610b0c344761126b90919063ffffffff16565b84611281565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610b6f929190611608565b602060405180830381600087803b158015610b8957600080fd5b505af1158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190611388565b610c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf7906116b1565b60405180910390fd5b809250505090565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c6491906115b6565b60206040518083038186803b158015610c7c57600080fd5b505afa158015610c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb491906113da565b90506000610cc3844784611281565b90508092505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d2b91906115b6565b60206040518083038186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b91906113da565b90506000610d8a848347611281565b90508092505050919050565b60008060015414610ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390611671565b60405180910390fd5b47600181905550600154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610e86939291906115d1565b602060405180830381600087803b158015610ea057600080fd5b505af1158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed89190611388565b610ee157600080fd5b6001549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f4791906115b6565b60206040518083038186803b158015610f5f57600080fd5b505afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9791906113da565b905090565b600080610fb2344761126b90919063ffffffff16565b90508060038190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161101791906115b6565b60206040518083038186803b15801561102f57600080fd5b505afa158015611043573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106791906113da565b90508060048190555060006110a360018461108b853461125590919063ffffffff16565b6110959190611787565b6112f590919063ffffffff16565b905034600581905550806006819055506000836110cb6001543461125590919063ffffffff16565b6110d59190611787565b905061112981600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112f590919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611181816001546112f590919063ffffffff16565b60018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016111e4939291906115d1565b602060405180830381600087803b1580156111fe57600080fd5b505af1158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190611388565b61123f57600080fd5b8094505050505090565b60045481565b60065481565b6000818361126391906117b8565b905092915050565b600081836112799190611812565b905092915050565b6000806112996103e58661125590919063ffffffff16565b905060006112b0828561125590919063ffffffff16565b905060006112db836112cd6103e88961125590919063ffffffff16565b6112f590919063ffffffff16565b905080826112e99190611787565b93505050509392505050565b600081836113039190611731565b905092915050565b60008135905061131a816118ec565b92915050565b60008151905061132f81611903565b92915050565b6000813590506113448161191a565b92915050565b6000815190506113598161191a565b92915050565b60006020828403121561137157600080fd5b600061137f8482850161130b565b91505092915050565b60006020828403121561139a57600080fd5b60006113a884828501611320565b91505092915050565b6000602082840312156113c357600080fd5b60006113d184828501611335565b91505092915050565b6000602082840312156113ec57600080fd5b60006113fa8482850161134a565b91505092915050565b61140c81611846565b82525050565b600061141f602f83611720565b91507f6164647265737320686173206e6f742070726f7669646564206c69717569646960008301527f747920746f207468697320706f6f6c00000000000000000000000000000000006020830152604082019050919050565b6000611485601983611720565b91507f6661696c656420746f207472616e7366657220746f6b656e73000000000000006000830152602082019050919050565b60006114c5602083611720565b91507f6465782068617320616c7265616479206265656e20696e697469616c697a65646000830152602082019050919050565b6000611505601283611720565b91507f6661696c656420746f2073656e642045544800000000000000000000000000006000830152602082019050919050565b6000611545600083611715565b9150600082019050919050565b600061155f601683611720565b91507f6661696c656420746f207472616e7366657220455448000000000000000000006000830152602082019050919050565b61159b81611884565b82525050565b60006115ac82611538565b9150819050919050565b60006020820190506115cb6000830184611403565b92915050565b60006060820190506115e66000830186611403565b6115f36020830185611403565b6116006040830184611592565b949350505050565b600060408201905061161d6000830185611403565b61162a6020830184611592565b9392505050565b6000602082019050818103600083015261164a81611412565b9050919050565b6000602082019050818103600083015261166a81611478565b9050919050565b6000602082019050818103600083015261168a816114b8565b9050919050565b600060208201905081810360008301526116aa816114f8565b9050919050565b600060208201905081810360008301526116ca81611552565b9050919050565b60006020820190506116e66000830184611592565b92915050565b60006040820190506117016000830185611592565b61170e6020830184611592565b9392505050565b600081905092915050565b600082825260208201905092915050565b600061173c82611884565b915061174783611884565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561177c5761177b61188e565b5b828201905092915050565b600061179282611884565b915061179d83611884565b9250826117ad576117ac6118bd565b5b828204905092915050565b60006117c382611884565b91506117ce83611884565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118075761180661188e565b5b828202905092915050565b600061181d82611884565b915061182883611884565b92508282101561183b5761183a61188e565b5b828203905092915050565b600061185182611864565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6118f581611846565b811461190057600080fd5b50565b61190c81611858565b811461191757600080fd5b50565b61192381611884565b811461192e57600080fd5b5056fea26469706673582212206989116a2ba68c6a40d6b087d8681c4f7b922e6fd4f38278f360a89f86b1bde164736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c806370b2a30f11610095578063b7b0422d11610064578063b7b0422d1461035a578063b9cf50051461038a578063d0e30db0146103b5578063ea915f91146103d3578063eec7faa1146103fe576100fe565b806370b2a30f14610292578063789770f4146102c257806380c1443b146102e057806386e35a9a1461031d576100fe565b80632e1a7d4d116100d15780632e1a7d4d146101c157806335c7e925146101ff5780634099cfc21461022a57806365119f7214610255576100fe565b80630910a510146101035780630ea229181461012e57806315770f92146101595780631e2bc32114610184575b600080fd5b34801561010f57600080fd5b50610118610429565b60405161012591906116d1565b60405180910390f35b34801561013a57600080fd5b50610143610431565b60405161015091906116d1565b60405180910390f35b34801561016557600080fd5b5061016e610437565b60405161017b91906116d1565b60405180910390f35b34801561019057600080fd5b506101ab60048036038101906101a6919061135f565b61043d565b6040516101b891906116d1565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e391906113b1565b610507565b6040516101f69291906116ec565b60405180910390f35b34801561020b57600080fd5b506102146107bb565b60405161022191906116d1565b60405180910390f35b34801561023657600080fd5b5061023f6107c5565b60405161024c91906116d1565b60405180910390f35b34801561026157600080fd5b5061027c6004803603810190610277919061135f565b6107cb565b60405161028991906116d1565b60405180910390f35b6102ac60048036038101906102a791906113b1565b6107e3565b6040516102b991906116d1565b60405180910390f35b6102ca610a45565b6040516102d791906116d1565b60405180910390f35b3480156102ec57600080fd5b50610307600480360381019061030291906113b1565b610c08565b60405161031491906116d1565b60405180910390f35b34801561032957600080fd5b50610344600480360381019061033f91906113b1565b610ccf565b60405161035191906116d1565b60405180910390f35b610374600480360381019061036f91906113b1565b610d96565b60405161038191906116d1565b60405180910390f35b34801561039657600080fd5b5061039f610eeb565b6040516103ac91906116d1565b60405180910390f35b6103bd610f9c565b6040516103ca91906116d1565b60405180910390f35b3480156103df57600080fd5b506103e8611249565b6040516103f591906116d1565b60405180910390f35b34801561040a57600080fd5b5061041361124f565b60405161042091906116d1565b60405180910390f35b600047905090565b60055481565b60015481565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116104c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b790611631565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161056691906115b6565b60206040518083038186803b15801561057e57600080fd5b505afa158015610592573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b691906113da565b905060006001546105d0478761125590919063ffffffff16565b6105da9190611787565b905060006001546105f4848861125590919063ffffffff16565b6105fe9190611787565b905061065282600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461126b90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506106aa8260015461126b90919063ffffffff16565b6001819055503373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501580156106f6573d6000803e3d6000fd5b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610752929190611608565b602060405180830381600087803b15801561076c57600080fd5b505af1158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190611388565b6107ad57600080fd5b818194509450505050915091565b6000600154905090565b60035481565b60026020528060005260406000206000915090505481565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161083f91906115b6565b60206040518083038186803b15801561085757600080fd5b505afa15801561086b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088f91906113da565b9050600061089e848347611281565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016108fd939291906115d1565b602060405180830381600087803b15801561091757600080fd5b505af115801561092b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094f9190611388565b61098e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098590611651565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16826040516109b4906115a1565b60006040518083038185875af1925050503d80600081146109f1576040519150601f19603f3d011682016040523d82523d6000602084013e6109f6565b606091505b5050905080610a3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3190611691565b60405180910390fd5b819350505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610aa191906115b6565b60206040518083038186803b158015610ab957600080fd5b505afa158015610acd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af191906113da565b90506000610b1234610b0c344761126b90919063ffffffff16565b84611281565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610b6f929190611608565b602060405180830381600087803b158015610b8957600080fd5b505af1158015610b9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc19190611388565b610c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf7906116b1565b60405180910390fd5b809250505090565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c6491906115b6565b60206040518083038186803b158015610c7c57600080fd5b505afa158015610c90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb491906113da565b90506000610cc3844784611281565b90508092505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d2b91906115b6565b60206040518083038186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7b91906113da565b90506000610d8a848347611281565b90508092505050919050565b60008060015414610ddc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd390611671565b60405180910390fd5b47600181905550600154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610e86939291906115d1565b602060405180830381600087803b158015610ea057600080fd5b505af1158015610eb4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed89190611388565b610ee157600080fd5b6001549050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f4791906115b6565b60206040518083038186803b158015610f5f57600080fd5b505afa158015610f73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9791906113da565b905090565b600080610fb2344761126b90919063ffffffff16565b90508060038190555060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161101791906115b6565b60206040518083038186803b15801561102f57600080fd5b505afa158015611043573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106791906113da565b90508060048190555060006110a360018461108b853461125590919063ffffffff16565b6110959190611787565b6112f590919063ffffffff16565b905034600581905550806006819055506000836110cb6001543461125590919063ffffffff16565b6110d59190611787565b905061112981600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112f590919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550611181816001546112f590919063ffffffff16565b60018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016111e4939291906115d1565b602060405180830381600087803b1580156111fe57600080fd5b505af1158015611212573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112369190611388565b61123f57600080fd5b8094505050505090565b60045481565b60065481565b6000818361126391906117b8565b905092915050565b600081836112799190611812565b905092915050565b6000806112996103e58661125590919063ffffffff16565b905060006112b0828561125590919063ffffffff16565b905060006112db836112cd6103e88961125590919063ffffffff16565b6112f590919063ffffffff16565b905080826112e99190611787565b93505050509392505050565b600081836113039190611731565b905092915050565b60008135905061131a816118ec565b92915050565b60008151905061132f81611903565b92915050565b6000813590506113448161191a565b92915050565b6000815190506113598161191a565b92915050565b60006020828403121561137157600080fd5b600061137f8482850161130b565b91505092915050565b60006020828403121561139a57600080fd5b60006113a884828501611320565b91505092915050565b6000602082840312156113c357600080fd5b60006113d184828501611335565b91505092915050565b6000602082840312156113ec57600080fd5b60006113fa8482850161134a565b91505092915050565b61140c81611846565b82525050565b600061141f602f83611720565b91507f6164647265737320686173206e6f742070726f7669646564206c69717569646960008301527f747920746f207468697320706f6f6c00000000000000000000000000000000006020830152604082019050919050565b6000611485601983611720565b91507f6661696c656420746f207472616e7366657220746f6b656e73000000000000006000830152602082019050919050565b60006114c5602083611720565b91507f6465782068617320616c7265616479206265656e20696e697469616c697a65646000830152602082019050919050565b6000611505601283611720565b91507f6661696c656420746f2073656e642045544800000000000000000000000000006000830152602082019050919050565b6000611545600083611715565b9150600082019050919050565b600061155f601683611720565b91507f6661696c656420746f207472616e7366657220455448000000000000000000006000830152602082019050919050565b61159b81611884565b82525050565b60006115ac82611538565b9150819050919050565b60006020820190506115cb6000830184611403565b92915050565b60006060820190506115e66000830186611403565b6115f36020830185611403565b6116006040830184611592565b949350505050565b600060408201905061161d6000830185611403565b61162a6020830184611592565b9392505050565b6000602082019050818103600083015261164a81611412565b9050919050565b6000602082019050818103600083015261166a81611478565b9050919050565b6000602082019050818103600083015261168a816114b8565b9050919050565b600060208201905081810360008301526116aa816114f8565b9050919050565b600060208201905081810360008301526116ca81611552565b9050919050565b60006020820190506116e66000830184611592565b92915050565b60006040820190506117016000830185611592565b61170e6020830184611592565b9392505050565b600081905092915050565b600082825260208201905092915050565b600061173c82611884565b915061174783611884565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561177c5761177b61188e565b5b828201905092915050565b600061179282611884565b915061179d83611884565b9250826117ad576117ac6118bd565b5b828204905092915050565b60006117c382611884565b91506117ce83611884565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118075761180661188e565b5b828202905092915050565b600061181d82611884565b915061182883611884565b92508282101561183b5761183a61188e565b5b828203905092915050565b600061185182611864565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6118f581611846565b811461190057600080fd5b50565b61190c81611858565b811461191757600080fd5b50565b61192381611884565b811461192e57600080fd5b5056fea26469706673582212206989116a2ba68c6a40d6b087d8681c4f7b922e6fd4f38278f360a89f86b1bde164736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1032,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)663"
      },
      {
        "astId": 1034,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1038,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "liquidityProvided",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1040,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "ethRes",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1042,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "tokenRes",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1044,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "msgVal",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1046,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "tokenAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}