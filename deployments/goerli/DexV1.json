{
  "address": "0x814e3fe495d700d7F067D2FC54ab8377a571d57d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "yeahTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_ethAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountSentToFunc",
          "type": "uint256"
        }
      ],
      "name": "deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_ethAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amountSentToFunc",
          "type": "uint256"
        }
      ],
      "name": "withdrawed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LPTokenAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LPTokenAddressSetter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_LPTokenAddress",
          "type": "address"
        }
      ],
      "name": "LPTokenSetAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ethToToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "msgValue",
          "type": "uint256"
        }
      ],
      "name": "ethToTokenView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidityProvider",
          "type": "address"
        }
      ],
      "name": "getLiquidityProvided",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "init",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "liquidityProvided",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "tokenToEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        }
      ],
      "name": "tokenToEthView",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xba9ea998ded036c439c9e828a5fba36217310319656d9ef4fe814bdc8e83a104",
  "receipt": {
    "to": null,
    "from": "0x684585A4E1F28D83F7404F0ec785758C100a3509",
    "contractAddress": "0x814e3fe495d700d7F067D2FC54ab8377a571d57d",
    "transactionIndex": 87,
    "gasUsed": "1878538",
    "logsBloom": "0x
    "blockHash": "0x1f1278677243fdeb6f917fe3fa79ed1f2048e2b6b8cd4ddb22734869d6213c7f",
    "transactionHash": "0xba9ea998ded036c439c9e828a5fba36217310319656d9ef4fe814bdc8e83a104",
    "logs": [],
    "blockNumber": 8333469,
    "cumulativeGasUsed": "21363734",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD02f877E7c9748B69729ACf39949C12A8D529B5c"
  ],
  "numDeployments": 9,
  "solcInputHash": "85906abb0030b4504cd436e067db9adc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"yeahTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountSentToFunc\",\"type\":\"uint256\"}],\"name\":\"deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amountSentToFunc\",\"type\":\"uint256\"}],\"name\":\"withdrawed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LPTokenAddressSetter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LPTokenAddress\",\"type\":\"address\"}],\"name\":\"LPTokenSetAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"msgValue\",\"type\":\"uint256\"}],\"name\":\"ethToTokenView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"getLiquidityProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"init\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"liquidityProvided\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokenToEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"tokenToEthView\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DexV1.sol\":\"DexV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/DexV1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//This is an exercise to put into practice a basic Dex based on Uniswap's V1 protocol,\\n//as a pair that exchanges native ETH with the ERC20 token address we introduce on contract deployment.\\ncontract DexV1 {\\n    using SafeMath for uint256;\\n    IERC20 token;\\n    uint256 public totalLiquidity;\\n    mapping(address => uint256) public liquidityProvided;\\n    address public LPTokenAddress;\\n    address public LPTokenAddressSetter;\\n    event deposited(uint256 indexed _ethAmount, uint256 indexed amountSentToFunc);\\n    event withdrawed(uint256 indexed _ethAmount, uint256 indexed amountSentToFunc);\\n\\n    constructor(address yeahTokenAddress) public {\\n        token = IERC20(yeahTokenAddress);\\n        LPTokenAddressSetter = msg.sender;\\n    }\\n\\n    function LPTokenSetAddress(address _LPTokenAddress) public {\\n        require(msg.sender == LPTokenAddressSetter, \\\"you are not the address setter\\\");\\n        LPTokenAddress = _LPTokenAddress;\\n    }\\n\\n    //getters\\n    function getLiquidity() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getTotalLiquidity() public view returns (uint256) {\\n        return totalLiquidity;\\n    }\\n\\n    function getTokenReserves() public view returns (uint256) {\\n        return token.balanceOf(address(this));\\n    }\\n\\n    function getLiquidityProvided(address liquidityProvider) public view returns (uint256) {\\n        require(\\n            liquidityProvided[liquidityProvider] > 0,\\n            \\\"address has not provided liquidity to this pool\\\"\\n        );\\n        return liquidityProvided[liquidityProvider];\\n    }\\n\\n    //to init, the contract must be approved to perform the transfer\\n    function init(uint256 tokens) public payable returns (uint256) {\\n        require(totalLiquidity == 0, \\\"dex has already been initialized\\\");\\n        // if someone send eth before calling the init function, the liquidity provided will be captured by\\n        //the user that calls init.\\n        totalLiquidity = address(this).balance;\\n        liquidityProvided[msg.sender] = totalLiquidity;\\n        //mint the LP tokens to the address that initializes the pool\\n        (bool success, ) = LPTokenAddress.call(\\n            abi.encodeWithSignature(\\\"mintTokensTo(address,uint256)\\\", msg.sender, totalLiquidity)\\n        );\\n        require(success, \\\"mint tx failed\\\");\\n        require(token.transferFrom(msg.sender, address(this), tokens)); //transfer call for the amount we set as an input to this func\\n        return totalLiquidity;\\n    }\\n\\n    function price(uint256 a, uint256 x, uint256 y) private pure returns (uint256) {\\n        //the constant k remains the same\\n        //x * y = k\\n        // x * y = x' * y'\\n\\n        //the amount of tokens we recieve depends on the multiplication of x and y to mantain the constant\\n        // x' * y' = k\\n        //a is the token amount we input in the exchange\\n        // x + a = x'\\n        //b is the token amount we recieve\\n        // y - b = y'\\n\\n        //(x + a)(y - b) = k\\n\\n        //solving to b we deduce:\\n        //b = (y * a) / (x + a)\\n\\n        //with the 0,3% trading fee:\\n        //b = (y * a * 0,997) / (x + a * 0,997)\\n\\n        uint256 input_with_fee = a.mul(997);\\n        uint256 numerator = y.mul(input_with_fee);\\n        uint256 denominator = x.mul(1000).add(input_with_fee);\\n        return numerator / denominator;\\n    }\\n\\n    function ethToToken() public payable returns (uint256) {\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        //ETH is X, tokens are Y\\n        //y - b = y'\\n        //how many tokens are we getting?\\n        uint256 tokensBought = price(msg.value, address(this).balance.sub(msg.value), tokenReserve); // a , x=x'- a, y\\n        require(token.transfer(msg.sender, tokensBought), \\\"failed to transfer ETH\\\");\\n        return tokensBought;\\n    }\\n\\n    function ethToTokenView(uint256 msgValue) public view returns (uint256) {\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        //ETH is X, tokens are Y\\n        //y - b = y'\\n        //how many tokens are we getting?\\n        uint256 tokensBought = price(msgValue, address(this).balance, tokenReserve); // a , x=x'- a, y\\n\\n        return tokensBought;\\n    }\\n\\n    function tokenToEth(uint256 tokens) public payable returns (uint256) {\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        //in this case, tokens is X, Y is eth\\n        //y - b = y'\\n        //how many ETH are we getting?\\n        uint256 ethBought = price(tokens, tokenReserve, address(this).balance); // a , x, y\\n        require(token.transferFrom(msg.sender, address(this), tokens), \\\"failed to transfer tokens\\\");\\n        (bool sent, ) = msg.sender.call{value: ethBought}(\\\"\\\");\\n        require(sent, \\\"failed to send ETH\\\");\\n        return ethBought;\\n    }\\n\\n    function tokenToEthView(uint256 tokens) public view returns (uint256) {\\n        uint256 tokenReserve = token.balanceOf(address(this));\\n        //in this case, tokens is X, Y is eth\\n        //y - b = y'\\n        //how many ETH are we getting?\\n        uint256 ethBought = price(tokens, tokenReserve, address(this).balance); // a , x, y\\n        return ethBought;\\n    }\\n\\n    function deposit() public payable returns (uint256) {\\n        //checks the original ETH reserve, subtracting what we have sent\\n        uint256 eth_reserve = address(this).balance.sub(msg.value);\\n        //Token reserve\\n        uint256 token_reserve = token.balanceOf(address(this));\\n        //token amount example with a pool with reserves of 4 eth and 8000 Dai\\n        // we send 1 eth, 1 * 8000 / 4 = 2000, therefore it will input the balance of 1 2000, which is correct.\\n        uint256 token_amount = (msg.value.mul(token_reserve) / eth_reserve).add(1);\\n\\n        //((eth sent * total liquidity shares ) / eth reserves ) + 1\\n        // the previous formula with 18 decimals makes it so that the LP tokens minted to the user is\\n        //equal to the eth send, since the total liquidity shares in V1 is always going to be equal to the eth reserves.\\n        uint256 liquidity_minted = msg.value.mul(totalLiquidity) / eth_reserve;\\n        emit deposited(liquidity_minted, msg.value);\\n        (bool success, ) = LPTokenAddress.call(\\n            abi.encodeWithSignature(\\\"mintTokensTo(address,uint256)\\\", msg.sender, liquidity_minted)\\n        );\\n        require(success, \\\"mint tx failed\\\");\\n        //liquidity tokens added to user balance\\n        liquidityProvided[msg.sender] = liquidityProvided[msg.sender].add(liquidity_minted);\\n        //update total liquidity for future liquidity operations\\n        totalLiquidity = totalLiquidity.add(liquidity_minted);\\n        //call transferFrom with the approved tokens to this contract to finish adding liquidity\\n        require(token.transferFrom(msg.sender, address(this), token_amount));\\n        return liquidity_minted;\\n\\n        //on V2 the process is transferFunction agnostic, there is no approval, instead, the tokens must be sent to the contract,\\n        //the contract itself will keep track of the token balance after each interaction, and will calculate how many tokens you have sent,\\n        //based on the difference between the balanceOf its own address in the ERC20 contract, with its own balance data structure.\\n    }\\n\\n    function withdraw(uint256 amount) public returns (uint256, uint256) {\\n        //ERC20 token call to know what is the balance of this contract\\n        uint256 token_reserve = token.balanceOf(address(this));\\n        //on the same pool mentioned before, with 5 eth and 10000 DAI the user inputs 1 as amount\\n        //1 * 5 / 5 = 1\\n        uint256 eth_amount = amount.mul(address(this).balance) / totalLiquidity;\\n        //1 * 10000 / 5 = 2000\\n        uint256 token_amount = amount.mul(token_reserve) / totalLiquidity;\\n        //liquidity subtracted from the users liquidity balance -1 = 0\\n        liquidityProvided[msg.sender] = liquidityProvided[msg.sender].sub(eth_amount);\\n        emit withdrawed(token_amount, amount);\\n        (bool success, ) = LPTokenAddress.call(\\n            abi.encodeWithSignature(\\\"burnTokensTo(address,uint256)\\\", msg.sender, eth_amount)\\n        );\\n        require(success, \\\"burn tx failed\\\");\\n        totalLiquidity = totalLiquidity.sub(eth_amount);\\n        //transfer eth to user natively\\n        payable(msg.sender).transfer(eth_amount);\\n        //transfer 2000 dai to user\\n        require(token.transfer(msg.sender, token_amount));\\n        return (eth_amount, token_amount);\\n    }\\n}\\n\",\"keccak256\":\"0x7821ddb4480d8d9b8fb9cb0c2a649837b56a51d1613c76c398def4ab1a67e892\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200219c3803806200219c8339818101604052810190620000379190620000d6565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000150565b600081519050620000d08162000136565b92915050565b600060208284031215620000e957600080fd5b6000620000f984828501620000bf565b91505092915050565b60006200010f8262000116565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001418162000102565b81146200014d57600080fd5b50565b61203c80620001606000396000f3fe6080604052600436106100f35760003560e01c8063789770f41161008a578063b7b0422d11610059578063b7b0422d1461034d578063b9cf50051461037d578063c3828bf0146103a8578063d0e30db0146103d3576100f3565b8063789770f41461028a57806380c1443b146102a857806386e35a9a146102e55780639b2a75d414610322576100f3565b80632e1a7d4d116100c65780632e1a7d4d146101b457806335c7e925146101f257806365119f721461021d57806370b2a30f1461025a576100f3565b80630910a510146100f857806315770f921461012357806315e892741461014e5780631e2bc32114610177575b600080fd5b34801561010457600080fd5b5061010d6103f1565b60405161011a9190611d68565b60405180910390f35b34801561012f57600080fd5b506101386103f9565b6040516101459190611d68565b60405180910390f35b34801561015a57600080fd5b506101756004803603810190610170919061188e565b6103ff565b005b34801561018357600080fd5b5061019e6004803603810190610199919061188e565b6104d3565b6040516101ab9190611d68565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d691906118e0565b61059d565b6040516101e9929190611d83565b60405180910390f35b3480156101fe57600080fd5b506102076109de565b6040516102149190611d68565b60405180910390f35b34801561022957600080fd5b50610244600480360381019061023f919061188e565b6109e8565b6040516102519190611d68565b60405180910390f35b610274600480360381019061026f91906118e0565b610a00565b6040516102819190611d68565b60405180910390f35b610292610c62565b60405161029f9190611d68565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca91906118e0565b610e25565b6040516102dc9190611d68565b60405180910390f35b3480156102f157600080fd5b5061030c600480360381019061030791906118e0565b610eec565b6040516103199190611d68565b60405180910390f35b34801561032e57600080fd5b50610337610fb3565b6040516103449190611bed565b60405180910390f35b610367600480360381019061036291906118e0565b610fd9565b6040516103749190611d68565b60405180910390f35b34801561038957600080fd5b5061039261128f565b60405161039f9190611d68565b60405180910390f35b3480156103b457600080fd5b506103bd611340565b6040516103ca9190611bed565b60405180910390f35b6103db611366565b6040516103e89190611d68565b60405180910390f35b600047905090565b60015481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048690611d48565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90611c68565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105fc9190611bed565b60206040518083038186803b15801561061457600080fd5b505afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190611909565b90506000600154610666478761178490919063ffffffff16565b6106709190611e29565b9050600060015461068a848861178490919063ffffffff16565b6106949190611e29565b90506106e882600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461179a90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555085817f85705d1b6e637d62ab8073c9b76fa16b8728f3edfcd9e55e14160ff8c97cb5e260405160405180910390a36000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1633846040516024016107a7929190611c3f565b6040516020818303038152906040527f9159521f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108319190611bc1565b6000604051808303816000865af19150503d806000811461086e576040519150601f19603f3d011682016040523d82523d6000602084013e610873565b606091505b50509050806108b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ae90611c88565b60405180910390fd5b6108cc8360015461179a90919063ffffffff16565b6001819055503373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610918573d6000803e3d6000fd5b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610974929190611c3f565b602060405180830381600087803b15801561098e57600080fd5b505af11580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c691906118b7565b6109cf57600080fd5b82829550955050505050915091565b6000600154905090565b60026020528060005260406000206000915090505481565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a5c9190611bed565b60206040518083038186803b158015610a7457600080fd5b505afa158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac9190611909565b90506000610abb8483476117b0565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610b1a93929190611c08565b602060405180830381600087803b158015610b3457600080fd5b505af1158015610b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c91906118b7565b610bab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba290611ca8565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1682604051610bd190611bd8565b60006040518083038185875af1925050503d8060008114610c0e576040519150601f19603f3d011682016040523d82523d6000602084013e610c13565b606091505b5050905080610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4e90611ce8565b60405180910390fd5b819350505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610cbe9190611bed565b60206040518083038186803b158015610cd657600080fd5b505afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e9190611909565b90506000610d2f34610d29344761179a90919063ffffffff16565b846117b0565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d8c929190611c3f565b602060405180830381600087803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde91906118b7565b610e1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1490611d28565b60405180910390fd5b809250505090565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e819190611bed565b60206040518083038186803b158015610e9957600080fd5b505afa158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed19190611909565b90506000610ee08447846117b0565b90508092505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f489190611bed565b60206040518083038186803b158015610f6057600080fd5b505afa158015610f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f989190611909565b90506000610fa78483476117b0565b90508092505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806001541461101f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101690611cc8565b60405180910390fd5b47600181905550600154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16336001546040516024016110bc929190611c3f565b6040516020818303038152906040527f0549a1be000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516111469190611bc1565b6000604051808303816000865af19150503d8060008114611183576040519150601f19603f3d011682016040523d82523d6000602084013e611188565b606091505b50509050806111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c390611d08565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161122993929190611c08565b602060405180830381600087803b15801561124357600080fd5b505af1158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b91906118b7565b61128457600080fd5b600154915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112eb9190611bed565b60206040518083038186803b15801561130357600080fd5b505afa158015611317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133b9190611909565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061137c344761179a90919063ffffffff16565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113da9190611bed565b60206040518083038186803b1580156113f257600080fd5b505afa158015611406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142a9190611909565b9050600061145f600184611447853461178490919063ffffffff16565b6114519190611e29565b61182490919063ffffffff16565b90506000836114796001543461178490919063ffffffff16565b6114839190611e29565b905034817f34ae341f17c047360b12a629691d1f03b4810838a55ccb85a144466d209f794060405160405180910390a36000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163383604051602401611501929190611c3f565b6040516020818303038152906040527f0549a1be000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161158b9190611bc1565b6000604051808303816000865af19150503d80600081146115c8576040519150601f19603f3d011682016040523d82523d6000602084013e6115cd565b606091505b5050905080611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160890611d08565b60405180910390fd5b61166382600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116bb8260015461182490919063ffffffff16565b60018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161171e93929190611c08565b602060405180830381600087803b15801561173857600080fd5b505af115801561174c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177091906118b7565b61177957600080fd5b819550505050505090565b600081836117929190611e5a565b905092915050565b600081836117a89190611eb4565b905092915050565b6000806117c86103e58661178490919063ffffffff16565b905060006117df828561178490919063ffffffff16565b9050600061180a836117fc6103e88961178490919063ffffffff16565b61182490919063ffffffff16565b905080826118189190611e29565b93505050509392505050565b600081836118329190611dd3565b905092915050565b60008135905061184981611fc1565b92915050565b60008151905061185e81611fd8565b92915050565b60008135905061187381611fef565b92915050565b60008151905061188881611fef565b92915050565b6000602082840312156118a057600080fd5b60006118ae8482850161183a565b91505092915050565b6000602082840312156118c957600080fd5b60006118d78482850161184f565b91505092915050565b6000602082840312156118f257600080fd5b600061190084828501611864565b91505092915050565b60006020828403121561191b57600080fd5b600061192984828501611879565b91505092915050565b61193b81611ee8565b82525050565b600061194c82611dac565b6119568185611db7565b9350611966818560208601611f30565b80840191505092915050565b600061197f602f83611dc2565b91507f6164647265737320686173206e6f742070726f7669646564206c69717569646960008301527f747920746f207468697320706f6f6c00000000000000000000000000000000006020830152604082019050919050565b60006119e5600e83611dc2565b91507f6275726e207478206661696c65640000000000000000000000000000000000006000830152602082019050919050565b6000611a25601983611dc2565b91507f6661696c656420746f207472616e7366657220746f6b656e73000000000000006000830152602082019050919050565b6000611a65602083611dc2565b91507f6465782068617320616c7265616479206265656e20696e697469616c697a65646000830152602082019050919050565b6000611aa5601283611dc2565b91507f6661696c656420746f2073656e642045544800000000000000000000000000006000830152602082019050919050565b6000611ae5600083611db7565b9150600082019050919050565b6000611aff600e83611dc2565b91507f6d696e74207478206661696c65640000000000000000000000000000000000006000830152602082019050919050565b6000611b3f601683611dc2565b91507f6661696c656420746f207472616e7366657220455448000000000000000000006000830152602082019050919050565b6000611b7f601e83611dc2565b91507f796f7520617265206e6f742074686520616464726573732073657474657200006000830152602082019050919050565b611bbb81611f26565b82525050565b6000611bcd8284611941565b915081905092915050565b6000611be382611ad8565b9150819050919050565b6000602082019050611c026000830184611932565b92915050565b6000606082019050611c1d6000830186611932565b611c2a6020830185611932565b611c376040830184611bb2565b949350505050565b6000604082019050611c546000830185611932565b611c616020830184611bb2565b9392505050565b60006020820190508181036000830152611c8181611972565b9050919050565b60006020820190508181036000830152611ca1816119d8565b9050919050565b60006020820190508181036000830152611cc181611a18565b9050919050565b60006020820190508181036000830152611ce181611a58565b9050919050565b60006020820190508181036000830152611d0181611a98565b9050919050565b60006020820190508181036000830152611d2181611af2565b9050919050565b60006020820190508181036000830152611d4181611b32565b9050919050565b60006020820190508181036000830152611d6181611b72565b9050919050565b6000602082019050611d7d6000830184611bb2565b92915050565b6000604082019050611d986000830185611bb2565b611da56020830184611bb2565b9392505050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611dde82611f26565b9150611de983611f26565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e1e57611e1d611f63565b5b828201905092915050565b6000611e3482611f26565b9150611e3f83611f26565b925082611e4f57611e4e611f92565b5b828204905092915050565b6000611e6582611f26565b9150611e7083611f26565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611ea957611ea8611f63565b5b828202905092915050565b6000611ebf82611f26565b9150611eca83611f26565b925082821015611edd57611edc611f63565b5b828203905092915050565b6000611ef382611f06565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015611f4e578082015181840152602081019050611f33565b83811115611f5d576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b611fca81611ee8565b8114611fd557600080fd5b50565b611fe181611efa565b8114611fec57600080fd5b50565b611ff881611f26565b811461200357600080fd5b5056fea26469706673582212207fa3989de17914ac7eac0d76dca6d8fe3961f81f7e953ceef4a9c8fceb7b792b64736f6c63430008000033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c8063789770f41161008a578063b7b0422d11610059578063b7b0422d1461034d578063b9cf50051461037d578063c3828bf0146103a8578063d0e30db0146103d3576100f3565b8063789770f41461028a57806380c1443b146102a857806386e35a9a146102e55780639b2a75d414610322576100f3565b80632e1a7d4d116100c65780632e1a7d4d146101b457806335c7e925146101f257806365119f721461021d57806370b2a30f1461025a576100f3565b80630910a510146100f857806315770f921461012357806315e892741461014e5780631e2bc32114610177575b600080fd5b34801561010457600080fd5b5061010d6103f1565b60405161011a9190611d68565b60405180910390f35b34801561012f57600080fd5b506101386103f9565b6040516101459190611d68565b60405180910390f35b34801561015a57600080fd5b506101756004803603810190610170919061188e565b6103ff565b005b34801561018357600080fd5b5061019e6004803603810190610199919061188e565b6104d3565b6040516101ab9190611d68565b60405180910390f35b3480156101c057600080fd5b506101db60048036038101906101d691906118e0565b61059d565b6040516101e9929190611d83565b60405180910390f35b3480156101fe57600080fd5b506102076109de565b6040516102149190611d68565b60405180910390f35b34801561022957600080fd5b50610244600480360381019061023f919061188e565b6109e8565b6040516102519190611d68565b60405180910390f35b610274600480360381019061026f91906118e0565b610a00565b6040516102819190611d68565b60405180910390f35b610292610c62565b60405161029f9190611d68565b60405180910390f35b3480156102b457600080fd5b506102cf60048036038101906102ca91906118e0565b610e25565b6040516102dc9190611d68565b60405180910390f35b3480156102f157600080fd5b5061030c600480360381019061030791906118e0565b610eec565b6040516103199190611d68565b60405180910390f35b34801561032e57600080fd5b50610337610fb3565b6040516103449190611bed565b60405180910390f35b610367600480360381019061036291906118e0565b610fd9565b6040516103749190611d68565b60405180910390f35b34801561038957600080fd5b5061039261128f565b60405161039f9190611d68565b60405180910390f35b3480156103b457600080fd5b506103bd611340565b6040516103ca9190611bed565b60405180910390f35b6103db611366565b6040516103e89190611d68565b60405180910390f35b600047905090565b60015481565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461048f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048690611d48565b60405180910390fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600080600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90611c68565b60405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105fc9190611bed565b60206040518083038186803b15801561061457600080fd5b505afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c9190611909565b90506000600154610666478761178490919063ffffffff16565b6106709190611e29565b9050600060015461068a848861178490919063ffffffff16565b6106949190611e29565b90506106e882600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461179a90919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555085817f85705d1b6e637d62ab8073c9b76fa16b8728f3edfcd9e55e14160ff8c97cb5e260405160405180910390a36000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1633846040516024016107a7929190611c3f565b6040516020818303038152906040527f9159521f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516108319190611bc1565b6000604051808303816000865af19150503d806000811461086e576040519150601f19603f3d011682016040523d82523d6000602084013e610873565b606091505b50509050806108b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ae90611c88565b60405180910390fd5b6108cc8360015461179a90919063ffffffff16565b6001819055503373ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f19350505050158015610918573d6000803e3d6000fd5b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401610974929190611c3f565b602060405180830381600087803b15801561098e57600080fd5b505af11580156109a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c691906118b7565b6109cf57600080fd5b82829550955050505050915091565b6000600154905090565b60026020528060005260406000206000915090505481565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a5c9190611bed565b60206040518083038186803b158015610a7457600080fd5b505afa158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac9190611909565b90506000610abb8483476117b0565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401610b1a93929190611c08565b602060405180830381600087803b158015610b3457600080fd5b505af1158015610b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c91906118b7565b610bab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba290611ca8565b60405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1682604051610bd190611bd8565b60006040518083038185875af1925050503d8060008114610c0e576040519150601f19603f3d011682016040523d82523d6000602084013e610c13565b606091505b5050905080610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4e90611ce8565b60405180910390fd5b819350505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610cbe9190611bed565b60206040518083038186803b158015610cd657600080fd5b505afa158015610cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0e9190611909565b90506000610d2f34610d29344761179a90919063ffffffff16565b846117b0565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d8c929190611c3f565b602060405180830381600087803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde91906118b7565b610e1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1490611d28565b60405180910390fd5b809250505090565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e819190611bed565b60206040518083038186803b158015610e9957600080fd5b505afa158015610ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed19190611909565b90506000610ee08447846117b0565b90508092505050919050565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610f489190611bed565b60206040518083038186803b158015610f6057600080fd5b505afa158015610f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f989190611909565b90506000610fa78483476117b0565b90508092505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806001541461101f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101690611cc8565b60405180910390fd5b47600181905550600154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16336001546040516024016110bc929190611c3f565b6040516020818303038152906040527f0549a1be000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516111469190611bc1565b6000604051808303816000865af19150503d8060008114611183576040519150601f19603f3d011682016040523d82523d6000602084013e611188565b606091505b50509050806111cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111c390611d08565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161122993929190611c08565b602060405180830381600087803b15801561124357600080fd5b505af1158015611257573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127b91906118b7565b61128457600080fd5b600154915050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016112eb9190611bed565b60206040518083038186803b15801561130357600080fd5b505afa158015611317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133b9190611909565b905090565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008061137c344761179a90919063ffffffff16565b905060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016113da9190611bed565b60206040518083038186803b1580156113f257600080fd5b505afa158015611406573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142a9190611909565b9050600061145f600184611447853461178490919063ffffffff16565b6114519190611e29565b61182490919063ffffffff16565b90506000836114796001543461178490919063ffffffff16565b6114839190611e29565b905034817f34ae341f17c047360b12a629691d1f03b4810838a55ccb85a144466d209f794060405160405180910390a36000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163383604051602401611501929190611c3f565b6040516020818303038152906040527f0549a1be000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161158b9190611bc1565b6000604051808303816000865af19150503d80600081146115c8576040519150601f19603f3d011682016040523d82523d6000602084013e6115cd565b606091505b5050905080611611576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160890611d08565b60405180910390fd5b61166382600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461182490919063ffffffff16565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506116bb8260015461182490919063ffffffff16565b60018190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161171e93929190611c08565b602060405180830381600087803b15801561173857600080fd5b505af115801561174c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061177091906118b7565b61177957600080fd5b819550505050505090565b600081836117929190611e5a565b905092915050565b600081836117a89190611eb4565b905092915050565b6000806117c86103e58661178490919063ffffffff16565b905060006117df828561178490919063ffffffff16565b9050600061180a836117fc6103e88961178490919063ffffffff16565b61182490919063ffffffff16565b905080826118189190611e29565b93505050509392505050565b600081836118329190611dd3565b905092915050565b60008135905061184981611fc1565b92915050565b60008151905061185e81611fd8565b92915050565b60008135905061187381611fef565b92915050565b60008151905061188881611fef565b92915050565b6000602082840312156118a057600080fd5b60006118ae8482850161183a565b91505092915050565b6000602082840312156118c957600080fd5b60006118d78482850161184f565b91505092915050565b6000602082840312156118f257600080fd5b600061190084828501611864565b91505092915050565b60006020828403121561191b57600080fd5b600061192984828501611879565b91505092915050565b61193b81611ee8565b82525050565b600061194c82611dac565b6119568185611db7565b9350611966818560208601611f30565b80840191505092915050565b600061197f602f83611dc2565b91507f6164647265737320686173206e6f742070726f7669646564206c69717569646960008301527f747920746f207468697320706f6f6c00000000000000000000000000000000006020830152604082019050919050565b60006119e5600e83611dc2565b91507f6275726e207478206661696c65640000000000000000000000000000000000006000830152602082019050919050565b6000611a25601983611dc2565b91507f6661696c656420746f207472616e7366657220746f6b656e73000000000000006000830152602082019050919050565b6000611a65602083611dc2565b91507f6465782068617320616c7265616479206265656e20696e697469616c697a65646000830152602082019050919050565b6000611aa5601283611dc2565b91507f6661696c656420746f2073656e642045544800000000000000000000000000006000830152602082019050919050565b6000611ae5600083611db7565b9150600082019050919050565b6000611aff600e83611dc2565b91507f6d696e74207478206661696c65640000000000000000000000000000000000006000830152602082019050919050565b6000611b3f601683611dc2565b91507f6661696c656420746f207472616e7366657220455448000000000000000000006000830152602082019050919050565b6000611b7f601e83611dc2565b91507f796f7520617265206e6f742074686520616464726573732073657474657200006000830152602082019050919050565b611bbb81611f26565b82525050565b6000611bcd8284611941565b915081905092915050565b6000611be382611ad8565b9150819050919050565b6000602082019050611c026000830184611932565b92915050565b6000606082019050611c1d6000830186611932565b611c2a6020830185611932565b611c376040830184611bb2565b949350505050565b6000604082019050611c546000830185611932565b611c616020830184611bb2565b9392505050565b60006020820190508181036000830152611c8181611972565b9050919050565b60006020820190508181036000830152611ca1816119d8565b9050919050565b60006020820190508181036000830152611cc181611a18565b9050919050565b60006020820190508181036000830152611ce181611a58565b9050919050565b60006020820190508181036000830152611d0181611a98565b9050919050565b60006020820190508181036000830152611d2181611af2565b9050919050565b60006020820190508181036000830152611d4181611b32565b9050919050565b60006020820190508181036000830152611d6181611b72565b9050919050565b6000602082019050611d7d6000830184611bb2565b92915050565b6000604082019050611d986000830185611bb2565b611da56020830184611bb2565b9392505050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000611dde82611f26565b9150611de983611f26565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611e1e57611e1d611f63565b5b828201905092915050565b6000611e3482611f26565b9150611e3f83611f26565b925082611e4f57611e4e611f92565b5b828204905092915050565b6000611e6582611f26565b9150611e7083611f26565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611ea957611ea8611f63565b5b828202905092915050565b6000611ebf82611f26565b9150611eca83611f26565b925082821015611edd57611edc611f63565b5b828203905092915050565b6000611ef382611f06565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b83811015611f4e578082015181840152602081019050611f33565b83811115611f5d576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b611fca81611ee8565b8114611fd557600080fd5b50565b611fe181611efa565b8114611fec57600080fd5b50565b611ff881611f26565b811461200357600080fd5b5056fea26469706673582212207fa3989de17914ac7eac0d76dca6d8fe3961f81f7e953ceef4a9c8fceb7b792b64736f6c63430008000033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1032,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)663"
      },
      {
        "astId": 1034,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "totalLiquidity",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1038,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "liquidityProvided",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1040,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "LPTokenAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1042,
        "contract": "contracts/DexV1.sol:DexV1",
        "label": "LPTokenAddressSetter",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)663": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}